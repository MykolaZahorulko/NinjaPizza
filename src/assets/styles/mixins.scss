@use 'sass:math';
//----------------------------------------------------------------------------------------
// Adaptive Value Function Variables
$max-mockup-width: 1680; // Maximum width of the mockup (without 'px')
$container-max-width: 1370; // Maximum container width from the mockup (without 'px', includes padding)
$base-font-size: 16; // Base font size (without 'px')
$min-mockup-width: 390; // Minimum width of the mockup (without 'px')
// Colors variables
$color-white: #FFFFFF;
$color-black: #000000;
$color-hover: #8E3131;
$color-deep-grey: #7B7B7B;
$color-mid-grey: #ADADAD;
$color-light-grey: #F6F6F6;
$color-bright-grey: #FDFDFD;
//----------------------------------------------------------------------------------------
// Mixins
@mixin objf($size) {
	object-fit: $size;
	-webkit-object-fit: $size;
	-moz-object-fit: $size;
	-o-object-fit: $size;
}
@mixin objp($pos) {
	object-position: $pos;
	-webkit-object-position: $pos;
	-moz-object-position: $pos;
	-o-object-position: $pos;
}
@mixin anim($name, $time, $scenario, $howmany, $delay) {
	animation: $name $time $scenario $howmany $delay;
	-webkit-animation: $name $time $scenario $howmany $delay;
	-moz-animation: $name $time $scenario $howmany $delay;
	-o-animation: $name $time $scenario $howmany $delay;
}
@mixin rotate($deg) {
	transform: rotate($deg);
	-webkit-transform: rotate($deg);
	-moz-transform: rotate($deg);
	-o-transform: rotate($deg);
}
@mixin translate($degX: -50%, $degY: -50%) {
	transform: translate($degX, $degY);
	-webkit-transform: translate($degX, $degY);
	-moz-transform: translate($degX, $degY);
	-o-transform: translate($degX, $degY);
}
@mixin scale($num) {
	transform: scale($num);
	-webkit-transform: scale($num);
	-moz-transform: scale($num);
	-o-transform: scale($num);
}
@mixin transition($all, $time, $scenario, $delay) {
	transition: $all $time $scenario $delay;
	-webkit-transition: $all $time $scenario $delay;
	-moz-transition: $all $time $scenario $delay;
	-o-transition: $all $time $scenario $delay;
}
@mixin box-shadow($x: 1px, $y: 1px, $blur: 1px, $spread: 1px, $color: rgba(0, 0, 0, 0.15)) {
  -webkit-box-shadow: $x $y $blur $spread $color;
  -moz-box-shadow: $x $y $blur $spread $color;
  box-shadow: $x $y $blur $spread $color;
}
@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	border-radius: $radius;
}
//----------------------------------------------------------------------------------------
// Adaptive Value Function
@mixin adaptive-value($property, $max-size, $min-size, $resize-type) {
	$size-difference: $max-size - $min-size;

	@if $resize-type == 1 {
		// Resize when viewport width is less than the container's max width
		& {
			#{$property}: $max-size + px;
		}
		@media (max-width: calc($container-max-width / $base-font-size) + em) {
			& {
				#{$property}: calc(
					#{$min-size + px} + #{$size-difference} *
						((100vw - #{$min-mockup-width + px}) / #{$container-max-width - $min-mockup-width})
				);
			}
		}
	} @else if $resize-type == 2 {
		// Resize when viewport width is greater than the container's max width
		& {
			#{$property}: $max-size + px;
		}
		@media (min-width: calc($container-max-width / $base-font-size) + em) {
			& {
				#{$property}: calc(
					#{$min-size + px} + #{$size-difference} *
						((100vw - #{$min-mockup-width + px}) / #{$max-mockup-width - $min-mockup-width})
				);
			}
		}
	} @else {
		// Always resize based on viewport width
		& {
			#{$property}: calc(
				#{$min-size +
					px} +
					#{$size-difference} *
					((100vw - #{$min-mockup-width + px}) / #{$max-mockup-width - $min-mockup-width})
			);
		}
	}
}

//----------------------------------------------------------------------------------------
// Convert Pixel to Percentage
@function percent($partial-px, $total-px) {
	$percentage-result: math.div($partial-px, $total-px) * 100%;
	@return $percentage-result;
}

// Convert Pixel to REM
@function rem($px-value) {
	$rem-result: math.div($px-value, $base-font-size) + rem;
	@return $rem-result;
}

// Convert Pixel to EM
@function em($px-value) {
	$em-result: math.div($px-value, $base-font-size) + em;
	@return $em-result;
}

//----------------------------------------------------------------------------------------
// Reusable classes
.container {
	/*  -- CONTAINER WIDTH  -- */
	max-width: rem($container-max-width);
	margin: 0 auto;
	@include adaptive-value(padding-right, 40, 20, 1);
	@include adaptive-value(padding-left, 40, 20, 1);
}

.img {
	position: relative;
	img,
	svg,
	picture,
	source,
	video,
	iframe {
		position: absolute;
		top: 0;
		left: 0;
		max-width: 100%;
		width: 100%;
		height: 100%;
		@include objf(cover);
	}
}